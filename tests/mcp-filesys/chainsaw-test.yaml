apiVersion: chainsaw.kyverno.io/v1alpha1
kind: Test
metadata:
  name: mcp-filesys
spec:
  # Skipping this test due to known instability in the MCP Filesystem Server deployment.
  # Re-enable when issue: https://mckinsey.atlassian.net/browse/AAS-2485 is resolved.
  skip: true
  timeouts:
    exec: 300s  # Extended timeout for Helm operations and service deployment
  description: Test MCP Filesystem Server deployment and ARK integration using Helm chart
  steps:
  - name: deploy-mcp-server-with-helm
    try:
    - script:
        content: |
          helm install mcp-filesys ../../mcp/filesys/chart --wait --timeout=180s \
            --namespace $NAMESPACE \
            --set image.repository=${FILESYS_IMAGE:-filesys-mcp-server} \
            --set image.tag=${FILESYS_IMAGE_TAG:-latest} \
            --set persistence.enabled=false
        env:
        - name: NAMESPACE
          value: ($namespace)
    cleanup:
    - script:
        content: |
          helm uninstall mcp-filesys --namespace $NAMESPACE --wait --timeout=180s || true
        env:
        - name: NAMESPACE
          value: ($namespace)

  - name: setup-ark-resources
    try:
    - script:
        skipLogOutput: true
        content: |
          set -u
          echo "{\"token\": \"$E2E_TEST_AZURE_OPENAI_KEY\", \"url\": \"$E2E_TEST_AZURE_OPENAI_BASE_URL\"}"
        outputs:
        - name: azure
          value: (json_parse($stdout))
    - apply:
        file: manifests/a00-rbac.yaml
    - apply:
        file: manifests/a04-secret.yaml
    - apply:
        file: manifests/a05-model.yaml

  - name: wait-for-resources
    try:
    - assert:
        resource:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: mcp-filesys
          status:
            readyReplicas: 1
    - assert:
        resource:
          apiVersion: ark.mckinsey.com/v1alpha1
          kind: Model
          metadata:
            name: test-model
          status:
            phase: ready
    - assert:
        resource:
          apiVersion: ark.mckinsey.com/v1alpha1
          kind: MCPServer
          metadata:
            name: mcp-filesys
          status:
            (toolCount > `0`): true
    - assert:
        resource:
          apiVersion: ark.mckinsey.com/v1alpha1
          kind: Tool
          metadata:
            name: mcp-filesys-read-file
    - assert:
        resource:
          apiVersion: ark.mckinsey.com/v1alpha1
          kind: Tool
          metadata:
            name: mcp-filesys-write-file
    - assert:
        resource:
          apiVersion: ark.mckinsey.com/v1alpha1
          kind: Tool
          metadata:
            name: mcp-filesys-list-directory
    - assert:
        resource:
          apiVersion: ark.mckinsey.com/v1alpha1
          kind: Tool
          metadata:
            name: mcp-filesys-copy-file
    - assert:
        resource:
          apiVersion: ark.mckinsey.com/v1alpha1
          kind: Tool
          metadata:
            name: mcp-filesys-delete-file

  - name: setup-agent-and-query
    try:
    - apply:
        file: manifests/a06-agent.yaml
    - apply:
        file: manifests/a07-query.yaml

  - name: test-ark-integration
    try:
    - assert:
        resource:
          apiVersion: ark.mckinsey.com/v1alpha1
          kind: Agent
          metadata:
            name: filesys-agent
    - assert:
        resource:
          apiVersion: ark.mckinsey.com/v1alpha1
          kind: Query
          metadata:
            name: filesys-test-query
          status:
            phase: done
    - assert:
        resource:
          apiVersion: ark.mckinsey.com/v1alpha1
          kind: Query
          metadata:
            name: filesys-test-query
          status:
            (length(responses)): 1

  - name: validate-query-response-content
    try:
    - assert:
        resource:
          apiVersion: ark.mckinsey.com/v1alpha1
          kind: Query
          metadata:
            name: filesys-test-query
          status:
            # Validate response contains evidence of filesystem operations
            (contains(responses[0].content, 'test-document.txt')): true
            (contains(responses[0].content, 'test-document-backup.txt')): true
            (contains(responses[0].content, 'filesystem operations')): true
    - script:
        env:
        - name: NAMESPACE
          value: ($namespace)
        content: |
          # Extract and validate specific parts of the response
          RESPONSE=$(kubectl -n $NAMESPACE get query filesys-test-query -o jsonpath='{.status.responses[0].content}')
          
          echo "=== Query Response Content ==="
          echo "$RESPONSE"
          echo "=========================="
          
          # Validate the response mentions key filesystem operations
          if echo "$RESPONSE" | grep -qi "list.*contents\|list.*directory"; then
            echo "✓ Response mentions directory listing"
          else
            echo "✗ Response missing directory listing mention"
            exit 1
          fi
          
          if echo "$RESPONSE" | grep -qi "created.*test-document.txt\|create.*test-document.txt"; then
            echo "✓ Response mentions file creation"
          else
            echo "✗ Response missing file creation mention"
            exit 1
          fi
          
          if echo "$RESPONSE" | grep -qi "copy\|backup"; then
            echo "✓ Response mentions file copying/backup"
          else
            echo "✗ Response missing file copying mention"
            exit 1
          fi
          
          if echo "$RESPONSE" | grep -qi "delet.*backup"; then
            echo "✓ Response mentions file deletion"
          else
            echo "✗ Response missing file deletion mention"
            exit 1
          fi
          
          echo "✅ All filesystem operations validated in response"
