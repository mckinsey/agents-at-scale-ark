name: Deploy

on:
  workflow_dispatch:
    inputs:
      ark_version:
        description: 'ARK version to deploy (e.g. "v0.1.19", blank for latest)'
        required: false
        type: string
        default: ''
      deploy_containers:
        description: 'Deploy multi-arch containers to registry'
        required: false
        type: boolean
        default: false
      deploy_to_distribution_environment:
        description: 'Deploy to distribution environment'
        required: false
        type: boolean
        default: false
      deploy_to_pages:
        description: 'Deploy documentation to GitHub Pages'
        required: false
        type: boolean
        default: false
      deploy_to_npm:
        description: 'Deploy ARK CLI to NPM registry'
        required: false
        type: boolean
        default: false
      publish_helm_chart:
        description: 'Publish Helm chart to container registry'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  packages: write
  pages: write
  id-token: write

jobs:
  check_version:
    runs-on: ubuntu-24.04
    outputs:
      version: ${{ steps.ark_version.outputs.version }}
      clean_version: ${{ steps.ark_version.outputs.clean_version }}
      sha: ${{ steps.get_sha.outputs.sha }}
      has_version: ${{ steps.check_tag.outputs.has_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Determine ARK version to deploy
        id: ark_version
        run: |
          if [ -n "${{ github.event.inputs.ark_version }}" ]; then
            INPUT_VERSION="${{ github.event.inputs.ark_version }}"
            # Ensure version starts with 'v' for git tag lookup
            if [[ "$INPUT_VERSION" =~ ^v ]]; then
              VERSION="$INPUT_VERSION"
            else
              VERSION="v$INPUT_VERSION"
            fi
            echo "Using specified version: $VERSION"
          else
            VERSION="v$(cat version.txt | tr -d '\n')"
            echo "Using version from version.txt: $VERSION"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "clean_version=$(echo $VERSION | sed 's/^v//')" >> $GITHUB_OUTPUT

      - name: Check if version tag exists
        id: check_tag
        run: |
          VERSION="${{ steps.ark_version.outputs.version }}"
          if git rev-parse --verify "$VERSION" >/dev/null 2>&1; then
            echo "has_version=true" >> $GITHUB_OUTPUT
            echo "Version tag $VERSION exists"
          else
            echo "has_version=false" >> $GITHUB_OUTPUT
            echo "Version tag $VERSION does not exist"
          fi

      - name: Get SHA for version tag
        id: get_sha
        if: steps.check_tag.outputs.has_version == 'true'
        run: |
          VERSION="${{ steps.ark_version.outputs.version }}"
          SHA=$(git rev-list -n 1 "$VERSION")
          echo "sha=$SHA" >> $GITHUB_OUTPUT
          echo "Using SHA $SHA for version $VERSION"

  deploy-containers:
    needs: [check_version]
    if: ${{ inputs.deploy_containers }}
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - path: ark
            image: ark-controller
          - path: services/ark-api-a2a
            image: ark-api-a2a
            prebuild: "make ark-api-a2a-deps && mkdir -p services/ark-api-a2a/out && cp out/ark-sdk/py-sdk/dist/ark_sdk-*.whl services/ark-api-a2a/out/"
          - path: services/ark-api
            image: ark-api
            prebuild: "make ark-api-deps && mkdir -p services/ark-api/ark-api/out && cp out/ark-sdk/py-sdk/dist/ark_sdk-*.whl services/ark-api/ark-api/out/"
          - path: services/ark-dashboard
            image: ark-dashboard
            prebuild: "make ark-dashboard-deps"
          - path: services/ark-mcp
            image: ark-mcp
            prebuild: "make ark-mcp-deps && mkdir -p services/ark-mcp/ark-mcp/out && cp out/ark-sdk/py-sdk/dist/ark_sdk-*.whl services/ark-mcp/ark-mcp/out/"
    steps:
      - name: Validate version tag exists
        run: |
          if [ "${{ needs.check_version.outputs.has_version }}" != "true" ]; then
            echo "Error: Version tag is required for container deployment but does not exist"
            exit 1
          fi

      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.check_version.outputs.sha }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Build libraries
        run: make libs-build-all


      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          # Default registry: ghcr.io/mckinsey/agents-at-scale-ark (includes repo name for GHCR access control)
          registry: ${{ vars.DOCKER_REGISTRY || format('ghcr.io/{0}/{1}', github.repository_owner, github.event.repository.name) }}
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME || github.actor }}
          password: ${{ secrets.DOCKER_REGISTRY_PASSWORD || secrets.GITHUB_TOKEN }}

      - name: Build and push multi-arch containers
        uses: ./.github/actions/build-image
        with:
          path: ${{ matrix.path }}
          image: ${{ matrix.image }}
          tag: ${{ needs.check_version.outputs.clean_version }}
          registry: ${{ vars.DOCKER_REGISTRY || format('ghcr.io/{0}/{1}', github.repository_owner, github.event.repository.name) }}
          platforms: linux/amd64,linux/arm64
          push: true
          prebuild: ${{ matrix.prebuild }}

  deploy-to-distribution-environment:
    needs: [check_version]
    if: ${{ inputs.deploy_to_distribution_environment }}
    # This is the specific runner which is needed to authenticate to Platform
    # McKinsey for the Ark deployment.
    runs-on: gh-larger-linux-mini
    steps:
      - name: Validate version tag exists
        run: |
          if [ "${{ needs.check_version.outputs.has_version }}" != "true" ]; then
            echo "Error: Version tag is required for distribution environment deployment but does not exist"
            exit 1
          fi

      - uses: actions/checkout@v4
      
      - name: Install Helm
        uses: azure/setup-helm@v4
        with:
          version: '3.14.0'
          
      - name: Download ARK Helm chart from release
        run: |
          VERSION="${{ needs.check_version.outputs.version }}"
          CLEAN_VERSION="${{ needs.check_version.outputs.clean_version }}"
          echo "Downloading ARK Helm chart for version: $VERSION"
          
          # Download the specific chart version
          gh release download "$VERSION" --pattern "ark-${CLEAN_VERSION}.tgz" --repo McK-Internal/agents-at-scale
          
          echo "Downloaded chart:"
          ls -la ark-${CLEAN_VERSION}.tgz
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Publish Helm Chart to Container Registry
        if: ${{ inputs.publish_helm_chart }}
        run: |
          CLEAN_VERSION="${{ needs.check_version.outputs.clean_version }}"
          REGISTRY="${{ vars.DOCKER_REGISTRY || format('ghcr.io/{0}/{1}', github.repository_owner, github.event.repository.name) }}"
          
          helm registry login $REGISTRY -u "${{ secrets.DOCKER_REGISTRY_USERNAME || github.actor }}" --password-stdin <<< "${{ secrets.DOCKER_REGISTRY_PASSWORD || secrets.GITHUB_TOKEN }}"
          helm push ark-${CLEAN_VERSION}.tgz oci://${REGISTRY}/charts

      - name: Validate deployment secrets
        run: |
          [ -z "${{ secrets.DEPLOY_CLUSTER_LOGIN_URL }}" ] && { echo "error: DEPLOY_CLUSTER_LOGIN_URL secret required"; exit 1; }
          [ -z "${{ secrets.DEPLOY_CLUSTER_IDP_ISSUER_URL }}" ] && { echo "error: DEPLOY_CLUSTER_IDP_ISSUER_URL secret required"; exit 1; }

      - name: Setup kubeconfig for Distribution Environment
        uses: ./.github/actions/kubernetes/generate-kubeconfig-using-github-oidc
        with:
          cluster_login_url: ${{ secrets.DEPLOY_CLUSTER_LOGIN_URL }}
          idp_issuer_url: ${{ secrets.DEPLOY_CLUSTER_IDP_ISSUER_URL }}
          kubectl_version: v1.28.0

      - name: Check Currently Deployed ARK Status
        run: |
          helm status ark-controller -n ark-system || echo "No existing ARK release found - this is expected for fresh deployments"

      - name: Create namespace with Pod Security Standards
        run: |
          # Create namespace with Pod Security Standards labels to satisfy admission controllers
          kubectl create namespace ark-system --dry-run=client -o yaml | \
          kubectl patch -f - --local --type=merge -p='{
            "metadata": {
              "labels": {
                "pod-security.kubernetes.io/enforce": "baseline",
                "pod-security.kubernetes.io/audit": "baseline", 
                "pod-security.kubernetes.io/warn": "baseline"
              }
            }
          }' --dry-run=client -o yaml | kubectl apply -f -
        
      - name: Deploy ARK chart to Distribution Environment
        run: |
          # Deploy using helm with registry configuration
          helm upgrade --install ark-controller ./ark-${{ needs.check_version.outputs.clean_version }}.tgz \
            --namespace ark-system \
            --set controllerManager.container.image.repository=${{ vars.DOCKER_REGISTRY || format('ghcr.io/{0}/{1}', github.repository_owner, github.event.repository.name) }}/ark-controller \
            --set controllerManager.container.image.tag=${{ needs.check_version.outputs.clean_version }} \
            --set controllerManager.serviceAccountName=ark-controller \
            --set containerRegistry.enabled=true \
            --set containerRegistry.server=${{ vars.DOCKER_REGISTRY || format('ghcr.io/{0}/{1}', github.repository_owner, github.event.repository.name) }} \
            --set containerRegistry.username=${{ secrets.DOCKER_REGISTRY_USERNAME || github.actor }} \
            --set containerRegistry.password=${{ secrets.DOCKER_REGISTRY_PASSWORD || secrets.GITHUB_TOKEN }} \
            --set rbac.enable=false \
            --timeout=5m
            
          # Wait for deployment readiness
          ./scripts/deploy/wait-for-deployment.sh ark-controller ark-system 600
            
          echo "ARK ${{ needs.check_version.outputs.version }} deployed successfully to Distribution Environment"
          
      - name: Verify deployment
        run: |
          echo "ARK ${{ needs.check_version.outputs.version }} deployed successfully"
          kubectl get pods -n ark-system
          kubectl get deployments -n ark-system

  deploy-to-pages:
    if: ${{ inputs.deploy_to_pages }}
    runs-on: ubuntu-24.04
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          
      - name: Build Docs
        run: |
          cd docs
          npm ci
          npm run build
        env:
          # Set basePath for GitHub Pages deployment using configurable variable
          NEXT_PUBLIC_BASE_PATH: ${{ vars.DOCS_SITE_BASE_PATH || '' }}
          
      - name: Upload Site Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/out
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  deploy-to-npm:
    needs: [check_version]
    if: ${{ inputs.deploy_to_npm }}
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      
      - name: Download ark-cli artifact from release
        run: |
          VERSION="${{ needs.check_version.outputs.version }}"
          gh release download "$VERSION" -p "ark-cli.tgz"
        env:
          GH_TOKEN: ${{ github.token }}
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "22.x"
          registry-url: https://registry.npmjs.org/
      
      - name: Publish to npm
        run: |
          npm publish ark-cli.tgz --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
