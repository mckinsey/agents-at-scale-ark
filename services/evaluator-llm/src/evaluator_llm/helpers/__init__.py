"""
ARK SDK Event Helper Library

This library provides semantic helper classes for analyzing Kubernetes events
generated by the ARK operator. It replaces complex raw event expressions with
human-friendly methods for AI evaluation tasks.

Example Usage:
    from evaluator_llm.helpers import EventAnalyzer, ToolHelper, AgentHelper
    
    # Initialize event analyzer with context
    analyzer = EventAnalyzer(
        namespace="default",
        query_name="my-query", 
        session_id="session-123"
    )
    
    # Use helper classes for semantic analysis
    tool_helper = ToolHelper(analyzer)
    agent_helper = AgentHelper(analyzer)
    
    # Check if any tools were called
    if await tool_helper.was_tool_called():
        print("Tools were used in this execution")
        
    # Get tool success rate
    success_rate = await tool_helper.get_tool_success_rate()
    print(f"Tool success rate: {success_rate}")
    
    # Check agent execution
    if await agent_helper.was_agent_executed("my-agent"):
        execution_time = await agent_helper.get_average_agent_execution_time("my-agent")
        print(f"Agent executed in {execution_time:.2f} seconds")
"""

from .event_analyzer import EventAnalyzer
from .tool_helper import ToolHelper
from .agent_helper import AgentHelper
from .team_helper import TeamHelper
from .llm_helper import LLMHelper
from .sequence_helper import SequenceHelper
from .query_helper import QueryHelper
from .types import (
    EventScope,
    EventType, 
    Component,
    EventMetadata,
    ParsedEvent,
    EventFilter
)

__all__ = [
    # Core classes
    "EventAnalyzer",
    "ToolHelper", 
    "AgentHelper",
    "TeamHelper",
    "LLMHelper",
    "SequenceHelper",
    "QueryHelper",
    
    # Types and enums
    "EventScope",
    "EventType",
    "Component", 
    "EventMetadata",
    "ParsedEvent",
    "EventFilter"
]